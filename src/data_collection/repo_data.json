{
    "repo_name": "repo_data",
    "files": [
        {
            "file_name": ".gitignore",
            "description": ".env assignment3.py app.db app.py demodb.db"
        },
        {
            "file_name": "app.db",
            "description": "SQLite format 3\u0000\u0010\u0000\u0001\u0001\u0000@  \u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000k\u0003\u0007\u0017\u001d\u001d\u0001)tablediabetesdiabetes\fCREATE TABLE \"diabetes\" (\"Pregnancies\" int64, \"Glucose\" int64, \"BloodPressure\" int64, \"SkinThickness\" int64, \"Insulin\" int64, \"BMI\" float64, \"DiabetesPedigreeFunction\" float64, \"Age\" int64, \"Outcome\" int64)\u0013\u0002\u0007\u0017''\u0001etablecustomers_100customers_100\u0006CREATE TABLE \"customers_100\" (\"indexx\" int64, \"Customer_Id\" TEXT, \"First_Name\" TEXT, \"Last_Name\" TEXT, \"Company\" TEXT, \"City\" TEXT, \"Country\" TEXT, \"Phone_1\" TEXT, \"Phone_2\" TEXT, \"Emails\" TEXT, \"Subscription_Date\" TEXT, \"Website\" TEXT)P\u0001\u0007\u0017!!\u0001ktablepeople_100people_100\u0002CREATE TABLE \"people_100\" (\"indexx\" int64, \"User_Id\" TEXT, \"First_Name\" TEXT, \"Last_Name\" TEXT, \"Sex\" TEXT, \"Email\" TEXT, \"Phone\" TEXT, \"Date_of_birth\" TEXT, \"Job_Title\" TEXT)\u0005\u000000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000p# \u0001+\u001b\u0019\u0019A3!%#3Fb8a7f68e12784JacksonSparksFemalereynoldsdarryl@example.net(137)908-3129x650351980-11-18Set designerr\" \u0001+\u001b\u001b\u001933!5\"6Dec5b5542F8ed8BrandonSchmidtFemalemconley@example.net+1-386-673-1465x0061931-05-12Engineer, biomedicals!"
        },
        {
            "file_name": "app.py",
            "description": "import streamlit as st import pandas as pd import sqlite3 import os import logging from langchain_community.utilities import SQLDatabase from langchain_community.llms import HuggingFaceEndpoint from langchain_experimental.sql.base import SQLDatabaseChain from langchain.chains import create_sql_query_chain from langchain_community.tools.sql_database.tool import QuerySQLDataBaseTool"
        },
        {
            "file_name": "requirements.txt",
            "description": "streamlit==1.14.0 pandas==1.5.2 langchain-community==0.0.18 langchain-experimental==0.0.14 langchain-core==0.0.65 python-dotenv==0.21.0"
        },
        {
            "file_name": "testdb.db",
            "description": "SQLite format 3\u0000\u0010\u0000\u0001\u0001\u0000@  00\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000k\u0003\u0007\u0017\u001d\u001d\u0001)tablediabetesdiabetes\fCREATE TABLE \"diabetes\" (\"Pregnancies\" int64, \"Glucose\" int64, \"BloodPressure\" int64, \"SkinThickness\" int64, \"Insulin\" int64, \"BMI\" float64, \"DiabetesPedigreeFunction\" float64, \"Age\" int64, \"Outcome\" int64)\u0013\u0002\u0007\u0017''\u0001etablecustomers_100customers_100\u0006CREATE TABLE \"customers_100\" (\"indexx\" int64, \"Customer_Id\" TEXT, \"First_Name\" TEXT, \"Last_Name\" TEXT, \"Company\" TEXT, \"City\" TEXT, \"Country\" TEXT, \"Phone_1\" TEXT, \"Phone_2\" TEXT, \"Emails\" TEXT, \"Subscription_Date\" TEXT, \"Website\" TEXT)P\u0001\u0007\u0017!!\u0001ktablepeople_100people_100\u0002CREATE TABLE \"people_100\" (\"indexx\" int64, \"User_Id\" TEXT, \"First_Name\" TEXT, \"Last_Name\" TEXT, \"Sex\" TEXT, \"Email\" TEXT, \"Phone\" TEXT, \"Date_of_birth\" TEXT, \"Job_Title\" TEXT)\u0005\u0000\u0000\u0000\u0002\u000f\u0000\u0000\u0000\u0000\u0005\u000f\u000f  r\f\f\f'\u000b\u000b@  =\t\te\b\bs\b\u0003\u0007\u0007\u001f\u0006\u0006=\u0005\u0005?\u0004\u0004Y\u0003\u0003\u0003 \u0002\u0002X\u0001\u0001k\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000p# \u0001+\u001b\u0019\u0019A3!%#3Fb8a7f68e12784JacksonSparksFemalereynoldsdarryl@example.net(137)908-3129x650351980-11-18Set designerr\" \u0001+\u001b\u001b\u001933!5\"6Dec5b5542F8ed8BrandonSchmidtFemalemconley@example.net+1-386-673-1465x0061931-05-12Engineer, biomedicals!"
        },
        {
            "file_name": "config",
            "description": "[core] repositoryformatversion = 0 filemode = false bare = false logallrefupdates = true symlinks = false ignorecase = true [remote \"origin\"] url = https://github.com/hamza-amin-4365/Chat-with-sql.git fetch = +refs/heads/*:refs/remotes/origin/*"
        },
        {
            "file_name": "description",
            "description": "Unnamed repository; edit this file 'description' to name the repository."
        },
        {
            "file_name": "HEAD",
            "description": "ref: refs/heads/master"
        },
        {
            "file_name": "index",
            "description": "DIRC\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0006f03Df03D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00001s\u001apzG+_\f\u0000 .gitignore\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000f03Df03D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000e-+\u00dbK^\u007f!MDZHB$\u0000\tREADME.md\u0000f1Ghf1Gh\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00010\u0000\u0004Z(e'O\u038b\u0000\u0006app.db\u0000\u0000\u0000\u0000f1Ghf1Gh\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0015OS-$\u000e/i`.:s\u0013\u0000\u0006app.py\u0000\u0000\u0000\u0000f1Ghf1Gh\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000O\u0012\\;\u02ce\bJ\u0001Xl%\u000e\u0000\u0010requirements.txt\u0000\u0000f1fkf1fk\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00010\u0000\u0004Z(e'O\u038b\u0000\ttestdb.db\u0000TREE\u0000\u0000\u0000\u0019\u00006 0 _>\u065a\u0015g\b?gck\\m%u^1\u000bzr-fO\u0013 \u0006rW"
        },
        {
            "file_name": "packed-refs",
            "description": "# pack-refs with: peeled fully-peeled sorted 1e3ddf07edc8de2d142a0d4dcb2931880bc09dd7 refs/remotes/origin/master"
        },
        {
            "file_name": "applypatch-msg.sample",
            "description": "#!/bin/sh # # An example hook script to check the commit log message taken by # applypatch from an e-mail message. # # The hook should exit with non-zero status after issuing an # appropriate message if it wants to stop the commit.  The hook is # allowed to edit the commit message file. # # To enable this hook, rename this file to \"applypatch-msg\"."
        },
        {
            "file_name": "commit-msg.sample",
            "description": "#!/bin/sh # # An example hook script to check the commit log message. # Called by \"git commit\" with one argument, the name of the file # that has the commit message.  The hook should exit with non-zero # status after issuing an appropriate message if it wants to stop the # commit.  The hook is allowed to edit the commit message file. # # To enable this hook, rename this file to \"commit-msg\". "
        },
        {
            "file_name": "fsmonitor-watchman.sample",
            "description": "#!/usr/bin/perl  use strict; use warnings; use IPC::Open2;  # An example hook script to integrate Watchman # (https://facebook.github.io/watchman/) with git to speed up detecting # new and modified files. #"
        },
        {
            "file_name": "post-update.sample",
            "description": "#!/bin/sh # # An example hook script to prepare a packed repository for use over # dumb transports. # # To enable this hook, rename this file to \"post-update\".  exec git update-server-info"
        },
        {
            "file_name": "pre-applypatch.sample",
            "description": "#!/bin/sh # # An example hook script to verify what is about to be committed # by applypatch from an e-mail message. # # The hook should exit with non-zero status after issuing an # appropriate message if it wants to stop the commit. # # To enable this hook, rename this file to \"pre-applypatch\". "
        },
        {
            "file_name": "pre-commit.sample",
            "description": "#!/bin/sh # # An example hook script to verify what is about to be committed. # Called by \"git commit\" with no arguments.  The hook should # exit with non-zero status after issuing an appropriate message if # it wants to stop the commit. # # To enable this hook, rename this file to \"pre-commit\".  if git rev-parse --verify HEAD >/dev/null 2>&1"
        },
        {
            "file_name": "pre-merge-commit.sample",
            "description": "#!/bin/sh # # An example hook script to verify what is about to be committed. # Called by \"git merge\" with no arguments.  The hook should # exit with non-zero status after issuing an appropriate message to # stderr if it wants to stop the merge commit. # # To enable this hook, rename this file to \"pre-merge-commit\".  . git-sh-setup"
        },
        {
            "file_name": "pre-push.sample",
            "description": "#!/bin/sh  # An example hook script to verify what is about to be pushed.  Called by \"git # push\" after it has checked the remote status, but before anything has been # pushed.  If this script exits with a non-zero status nothing will be pushed. # # This hook is called with the following parameters: # # $1 -- Name of the remote to which the push is being done # $2 -- URL to which the push is being done"
        },
        {
            "file_name": "pre-rebase.sample",
            "description": "#!/bin/sh # # Copyright (c) 2006, 2008 Junio C Hamano # # The \"pre-rebase\" hook is run just before \"git rebase\" starts doing # its job, and can prevent the command from running by exiting with # non-zero status. # # The hook is called with the following parameters: #"
        },
        {
            "file_name": "pre-receive.sample",
            "description": "#!/bin/sh # # An example hook script to make use of push options. # The example simply echoes all push options that start with 'echoback=' # and rejects all pushes when the \"reject\" push option is used. # # To enable this hook, rename this file to \"pre-receive\".  if test -n \"$GIT_PUSH_OPTION_COUNT\" then"
        },
        {
            "file_name": "prepare-commit-msg.sample",
            "description": "#!/bin/sh # # An example hook script to prepare the commit log message. # Called by \"git commit\" with the name of the file that has the # commit message, followed by the description of the commit # message's source.  The hook's purpose is to edit the commit # message file.  If the hook fails with a non-zero status, # the commit is aborted. # # To enable this hook, rename this file to \"prepare-commit-msg\"."
        },
        {
            "file_name": "push-to-checkout.sample",
            "description": "#!/bin/sh  # An example hook script to update a checked-out tree on a git push. # # This hook is invoked by git-receive-pack(1) when it reacts to git # push and updates reference(s) in its repository, and when the push # tries to update the branch that is currently checked out and the # receive.denyCurrentBranch configuration variable is set to # updateInstead. #"
        },
        {
            "file_name": "sendemail-validate.sample",
            "description": "#!/bin/sh  # An example hook script to validate a patch (and/or patch series) before # sending it via email. # # The hook should exit with non-zero status after issuing an appropriate # message if it wants to prevent the email(s) from being sent. # # To enable this hook, rename this file to \"sendemail-validate\". #"
        },
        {
            "file_name": "update.sample",
            "description": "#!/bin/sh # # An example hook script to block unannotated tags from entering. # Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new # # To enable this hook, rename this file to \"update\". # # Config # ------ # hooks.allowunannotated"
        },
        {
            "file_name": "exclude",
            "description": "# git ls-files --others --exclude-from=.git/info/exclude # Lines that start with '#' are comments. # For a project mostly in C, the following would be a good set of # exclude patterns (uncomment them if you want to use them): # *.[oa] # *~"
        },
        {
            "file_name": "HEAD",
            "description": "0000000000000000000000000000000000000000 1e3ddf07edc8de2d142a0d4dcb2931880bc09dd7 Hamza Amin <mh4070685@gmail.com> 1727191025 +0500\tclone: from https://github.com/hamza-amin-4365/Chat-with-sql.git"
        },
        {
            "file_name": "master",
            "description": "0000000000000000000000000000000000000000 1e3ddf07edc8de2d142a0d4dcb2931880bc09dd7 Hamza Amin <mh4070685@gmail.com> 1727191025 +0500\tclone: from https://github.com/hamza-amin-4365/Chat-with-sql.git"
        },
        {
            "file_name": "HEAD",
            "description": "0000000000000000000000000000000000000000 1e3ddf07edc8de2d142a0d4dcb2931880bc09dd7 Hamza Amin <mh4070685@gmail.com> 1727191025 +0500\tclone: from https://github.com/hamza-amin-4365/Chat-with-sql.git"
        },
        {
            "file_name": "pack-d478f2440cf634fb30a928be9df927d832fd0b7e.idx",
            "description": "tOc\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u000b\u0000\u0000\u0000\u000b\u0000\u0000\u0000\u000b\u0000\u0000\u0000\u000b\u0000\u0000\u0000\u000b\u0000\u0000\u0000\f\u0000\u0000\u0000\f\u0000\u0000\u0000\f\u0000\u0000\u0000\f\u0000\u0000\u0000\f\u0000\u0000\u0000\f\u0000\u0000\u0000\f\u0000\u0000\u0000\f\u0000\u0000\u0000\f\u0000\u0000\u0000\f\u0000\u0000\u0000\f\u0000\u0000\u0000\f\u0000\u0000\u0000 \u0000\u0000\u0000 \u0000\u0000\u0000 \u0000\u0000\u0000 \u0000\u0000\u0000 \u0000\u0000\u0000 \u0000\u0000\u0000"
        },
        {
            "file_name": "pack-d478f2440cf634fb30a928be9df927d832fd0b7e.pack",
            "description": "PACK\u0000\u0000\u0000\u0002\u0000\u0000\u0000#Dx}\u001c0Q8\"\u0006*>{kYU\u0005+/k]\u000f~<\u0005U.?V\u001d{\u6facno\u0007o@sCx}\u03a3H\u0000<E\u001b\u001a \u036c\u0006L4\u00180\u0018\u001b\u0001$\u04cfgw'J*U"
        },
        {
            "file_name": "pack-d478f2440cf634fb30a928be9df927d832fd0b7e.rev",
            "description": "RIDX3\u0000\u0000\u0000\u001b\u0000\u0000\u0000\u001c\u0000\u0000\u0000\u0010\u0000\u0000\u0000\"\u0000\u0000\u0000\u0017\u0000\u0000\u0000 \u0000\u0000\u0000\u001fxD\f40('2\u000b~\u06dbb\u0011\u05bc @D\u0004"
        },
        {
            "file_name": "master",
            "description": "1e3ddf07edc8de2d142a0d4dcb2931880bc09dd7"
        },
        {
            "file_name": "HEAD",
            "description": "ref: refs/remotes/origin/master"
        }
    ],
    "readme": "# CHAT with SQLite Streamlit App with Foreign Keys\n\n## Table of Content\n- [Overview](#overview)\n- [Motivation](#motivation)\n- [Technical Aspect](#technical-aspect)\n- [Installation And Run](#installation-and-run)\n- [Directory Tree](#directory-tree)\n- [To Do](#to-do)\n- [Bug / Feature Request](#bug---feature-request)\n- [Technologies Used](#technologies-used)\n- [Credits](#credits)\n  \n## Overview\nThis project is a Streamlit application that allows users to upload multiple CSV files and create a SQLite database with tables corresponding to each CSV file. The application also handles foreign key relationships between the tables based on common integer columns found in the CSV files and it allows you to query your database in natural language.\n\n## Motivation\nThe motivation behind this project was to provide a user-friendly way to convert CSV data into a SQLite database, while also automatically handling foreign key relationships between the tables. This can be useful for data analysis, querying, and integration with other applications that work with SQLite databases.\n\n## Technical Aspect\nThe application uses the following technologies and libraries:\n\n- **Streamlit**: A Python library for building interactive web applications.\n- **Pandas**: A popular data manipulation and analysis library for Python.\n- **SQLite3**: A Python library for working with SQLite databases.\n- **LangChain**: A framework for building applications with large language models (LLMs).\n- **HuggingFace Endpoint**: An LLM provided by HuggingFace for natural language processing tasks.\n\nThe application follows these steps:\n\n1. Allow the user to upload multiple CSV files through the Streamlit interface.\n2. Read the CSV files into Pandas DataFrames.\n3. Analyze the DataFrames to find potential foreign key relationships based on common integer columns.\n4. Create a SQLite database and tables corresponding to each CSV file, with foreign key constraints based on the detected relationships.\n5. Provide an interface for the user to ask questions about the data.\n6. Use the LangChain framework and the HuggingFace LLM to generate SQL queries based on the user's questions.\n7. Execute the generated SQL queries on the SQLite database and display the results to the user.\n\n## Installation And Run\n1. Clone the repository or download the source code.\n2. Install the required packages by running the following command:\n\n```bash\npip install -r requirements.txt\n```\n3. Set up your HuggingFace API token by creating a .env file in the project directory and adding the following line:\n```bash\nhuggingfacehub_api_token=YOUR_API_TOKEN\n```\n4. Run the Streamlit app with the following command:\n```bash\nstreamlit run app.py\n```\nDirectory Tree\n```bash\n\u00e2\u201d\u201a   app.py\n\u00e2\u201d\u201a   README.md\n\u00e2\u201d\u201a   requirements.txt\n\u00e2\u201d\u201d\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acdata\n        # CSV files will be stored here\n```\n## To Do\n\nImplement support for handling more complex data types in CSV files.\nImprove the foreign key detection algorithm for better accuracy.\nAdd support for creating indexes on columns.\n\n## Bug / Feature Request\nIf you find a bug or have a feature request, please open an issue here.\n\n## Technologies Used\n<img target=\"_blank\" src=\"https://streamlit.io/images/brand/streamlit-mark-color.png\" width=200>\n<img target=\"_blank\" src=\"https://pandas.pydata.org/static/img/pandas.svg\" width=200>\n<img target=\"_blank\" src=\"https://www.sqlite.org/images/sqlite370_banner.gif\" width=200>\n<img target=\"_blank\" src=\"https://huggingface.co/front/assets/huggingface_logo-noborder.svg\" width=200>\n\n## Credits\nHuggingFace\nLangChain\n"
}